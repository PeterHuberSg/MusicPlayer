//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into PlayinglistTrack.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace MusicPlayer  {


    /// <summary>
    /// List tracking per Playlist which tracks have not been played yet
    /// </summary>
  public partial class PlayinglistTrack: IStorageItem<PlayinglistTrack> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for PlayinglistTrack. Gets set once PlayinglistTrack gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem playinglistTrack, int key, bool _) {
      ((PlayinglistTrack)playinglistTrack).Key = key;
    }


    public int PlaylistTrackKey { get; private set; }


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "PlaylistTrackKey"};


    /// <summary>
    /// None existing PlayinglistTrack, used as a temporary place holder when reading a CSV file
    /// which was not compacted. It might create first a later deleted item linking to a 
    /// deleted parent. In this case, the parent property gets set to NoPlayinglistTrack. Once the CSV
    /// file is completely read, that child will actually be deleted (released) and Verify()
    /// ensures that there are no stored children with links to NoPlayinglistTrack.
    /// </summary>
    internal static PlayinglistTrack NoPlayinglistTrack = new PlayinglistTrack(int.MinValue, isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of PlayinglistTrack has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/PlayinglistTrack, /*new*/PlayinglistTrack>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// PlayinglistTrack Constructor. If isStoring is true, adds PlayinglistTrack to DC.Data.PlayinglistTracks.
    /// </summary>
    public PlayinglistTrack(int playlistTrackKey, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      PlaylistTrackKey = playlistTrackKey;
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(4,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public PlayinglistTrack(PlayinglistTrack original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      PlaylistTrackKey = original.PlaylistTrackKey;
      onCloned(this);
    }
    partial void onCloned(PlayinglistTrack clone);


    /// <summary>
    /// Constructor for PlayinglistTrack read from CSV file
    /// </summary>
    private PlayinglistTrack(int key, CsvReader csvReader){
      Key = key;
      PlaylistTrackKey = csvReader.ReadInt();
      DC.Data._PlayinglistTracksByPlaylistTrackKey.Add(PlaylistTrackKey, this);
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New PlayinglistTrack read from CSV file
    /// </summary>
    internal static PlayinglistTrack Create(int key, CsvReader csvReader) {
      return new PlayinglistTrack(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds PlayinglistTrack to DC.Data.PlayinglistTracks.<br/>
    /// Throws an Exception when PlayinglistTrack is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"PlayinglistTrack cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data._PlayinglistTracksByPlaylistTrackKey.Add(PlaylistTrackKey, this);
      DC.Data._PlayinglistTracks.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write PlayinglistTrack to CSV file
    /// </summary>
    public const int EstimatedLineLength = 21;


    /// <summary>
    /// Write PlayinglistTrack to CSV file
    /// </summary>
    internal static void Write(PlayinglistTrack playinglistTrack, CsvWriter csvWriter) {
      playinglistTrack.onCsvWrite();
      csvWriter.Write(playinglistTrack.PlaylistTrackKey);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates PlayinglistTrack with the provided values
    /// </summary>
    public void Update(int playlistTrackKey) {
      var clone = new PlayinglistTrack(this);
      var isCancelled = false;
      onUpdating(playlistTrackKey, ref isCancelled);
      if (isCancelled) return;


      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (PlaylistTrackKey!=playlistTrackKey) {
        if (Key>=0) {
            DC.Data._PlayinglistTracksByPlaylistTrackKey.Remove(PlaylistTrackKey);
        }
        PlaylistTrackKey = playlistTrackKey;
        if (Key>=0) {
            DC.Data._PlayinglistTracksByPlaylistTrackKey.Add(PlaylistTrackKey, this);
        }
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._PlayinglistTracks.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(4, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(int playlistTrackKey, ref bool isCancelled);
    partial void onUpdated(PlayinglistTrack old);


    /// <summary>
    /// Updates this PlayinglistTrack with values from CSV file
    /// </summary>
    internal static void Update(PlayinglistTrack playinglistTrack, CsvReader csvReader){
      DC.Data._PlayinglistTracksByPlaylistTrackKey.Remove(playinglistTrack.PlaylistTrackKey);
      playinglistTrack.PlaylistTrackKey = csvReader.ReadInt();
      DC.Data._PlayinglistTracksByPlaylistTrackKey.Add(playinglistTrack.PlaylistTrackKey, playinglistTrack);
      playinglistTrack.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Removes PlayinglistTrack from DC.Data.PlayinglistTracks.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"PlayinglistTrack.Release(): PlayinglistTrack '{this}' is not stored in DC.Data, key is {Key}.");
      }
      DC.Data._PlayinglistTracksByPlaylistTrackKey.Remove(PlaylistTrackKey);
      DC.Data._PlayinglistTracks.Remove(Key);
      onReleased();
    }
    partial void onReleased();


    /// <summary>
    /// Undoes the new() statement as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var playinglistTrack = (PlayinglistTrack) item;
      playinglistTrack.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases PlayinglistTrack from DC.Data.PlayinglistTracks as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var playinglistTrack = (PlayinglistTrack) item;
      DC.Data._PlayinglistTracksByPlaylistTrackKey.Remove(playinglistTrack.PlaylistTrackKey);
      playinglistTrack.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the PlayinglistTrack item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (PlayinglistTrack) oldStorageItem;//an item clone with the values before item was updated
      var item = (PlayinglistTrack) newStorageItem;//is the instance whose values should be restored

      // remove updated item from dictionaries
      DC.Data._PlayinglistTracksByPlaylistTrackKey.Remove(item.PlaylistTrackKey);

      // updated item: restore old values
      item.PlaylistTrackKey = oldItem.PlaylistTrackKey;

      // add item with previous values to dictionaries
      DC.Data._PlayinglistTracksByPlaylistTrackKey.Add(item.PlaylistTrackKey, item);
      item.onRollbackItemUpdated(oldItem);
    }
    partial void onRollbackItemUpdated(PlayinglistTrack oldPlayinglistTrack);


    /// <summary>
    /// Adds PlayinglistTrack to DC.Data.PlayinglistTracks as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var playinglistTrack = (PlayinglistTrack) item;
      DC.Data._PlayinglistTracksByPlaylistTrackKey.Add(playinglistTrack.PlaylistTrackKey, playinglistTrack);
      playinglistTrack.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {PlaylistTrackKey}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {PlaylistTrackKey}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" PlaylistTrackKey: {PlaylistTrackKey};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
