//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by StorageClassGenerator
//
//     Do not change code in this file, it will get lost when the file gets 
//     auto generated again. Write your code into Playlist.cs.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using StorageLib;


namespace MusicPlayer  {


  public partial class Playlist: IStorageItem<Playlist> {

    #region Properties
    //      ----------

    /// <summary>
    /// Unique identifier for Playlist. Gets set once Playlist gets added to DC.Data.
    /// </summary>
    public int Key { get; private set; }
    internal static void SetKey(IStorageItem playlist, int key, bool _) {
      ((Playlist)playlist).Key = key;
    }


    public string Name { get; private set; }


    public string NameLower { get; private set; }


    public IStorageReadOnlyList<PlaylistTrack> PlaylistTracks => playlistTracks;
    readonly StorageList<PlaylistTrack> playlistTracks;


    /// <summary>
    /// Headers written to first line in CSV file
    /// </summary>
    internal static readonly string[] Headers = {"Key", "Name"};


    /// <summary>
    /// None existing Playlist, used as a temporary place holder when reading a CSV file
    /// which was not compacted. It might create first a later deleted item linking to a 
    /// deleted parent. In this case, the parent property gets set to NoPlaylist. Once the CSV
    /// file is completely read, that child will actually be deleted (released) and Verify()
    /// ensures that there are no stored children with links to NoPlaylist.
    /// </summary>
    internal static Playlist NoPlaylist = new Playlist("NoName", isStoring: false);
    #endregion


    #region Events
    //      ------

    /// <summary>
    /// Content of Playlist has changed. Gets only raised for changes occurring after loading DC.Data with previously stored data.
    /// </summary>
    public event Action</*old*/Playlist, /*new*/Playlist>? HasChanged;
    #endregion


    #region Constructors
    //      ------------

    /// <summary>
    /// Playlist Constructor. If isStoring is true, adds Playlist to DC.Data.Playlists.
    /// </summary>
    public Playlist(string name, bool isStoring = true) {
      Key = StorageExtensions.NoKey;
      Name = name;
      NameLower = Name.ToLowerInvariant();
      playlistTracks = new StorageList<PlaylistTrack>();
      onConstruct();
      if (DC.Data.IsTransaction) {
        DC.Data.AddTransaction(new TransactionItem(2,TransactionActivityEnum.New, Key, this));
      }

      if (isStoring) {
        Store();
      }
    }
    partial void onConstruct();


    /// <summary>
    /// Cloning constructor. It will copy all data from original except any collection (children).
    /// </summary>
    #pragma warning disable CS8618 // Children collections are uninitialized.
    public Playlist(Playlist original) {
    #pragma warning restore CS8618 //
      Key = StorageExtensions.NoKey;
      Name = original.Name;
      NameLower = original.NameLower;
      onCloned(this);
    }
    partial void onCloned(Playlist clone);


    /// <summary>
    /// Constructor for Playlist read from CSV file
    /// </summary>
    private Playlist(int key, CsvReader csvReader){
      Key = key;
      Name = csvReader.ReadString();
      NameLower = Name.ToLowerInvariant();
      DC.Data._PlaylistsByNameLower.Add(NameLower, this);
      playlistTracks = new StorageList<PlaylistTrack>();
      onCsvConstruct();
    }
    partial void onCsvConstruct();


    /// <summary>
    /// New Playlist read from CSV file
    /// </summary>
    internal static Playlist Create(int key, CsvReader csvReader) {
      return new Playlist(key, csvReader);
    }
    #endregion


    #region Methods
    //      -------

    /// <summary>
    /// Adds Playlist to DC.Data.Playlists.<br/>
    /// Throws an Exception when Playlist is already stored.
    /// </summary>
    public void Store() {
      if (Key>=0) {
        throw new Exception($"Playlist cannot be stored again in DC.Data, key {Key} is greater equal 0." + Environment.NewLine + ToString());
      }

      var isCancelled = false;
      onStoring(ref isCancelled);
      if (isCancelled) return;

      DC.Data._PlaylistsByNameLower.Add(NameLower, this);
      DC.Data._Playlists.Add(this);
      onStored();
    }
    partial void onStoring(ref bool isCancelled);
    partial void onStored();


    /// <summary>
    /// Estimated number of UTF8 characters needed to write Playlist to CSV file
    /// </summary>
    public const int EstimatedLineLength = 150;


    /// <summary>
    /// Write Playlist to CSV file
    /// </summary>
    internal static void Write(Playlist playlist, CsvWriter csvWriter) {
      playlist.onCsvWrite();
      csvWriter.Write(playlist.Name);
    }
    partial void onCsvWrite();


    /// <summary>
    /// Updates Playlist with the provided values
    /// </summary>
    public void Update(string name) {
      var clone = new Playlist(this);
      var isCancelled = false;
      onUpdating(name, ref isCancelled);
      if (isCancelled) return;


      //update properties and detect if any value has changed
      var isChangeDetected = false;
      if (Name!=name) {
        if (Key>=0) {
            DC.Data._PlaylistsByNameLower.Remove(NameLower);
        }
        Name = name;
        NameLower = Name.ToLowerInvariant();
        if (Key>=0) {
            DC.Data._PlaylistsByNameLower.Add(NameLower, this);
        }
        isChangeDetected = true;
      }
      if (isChangeDetected) {
        onUpdated(clone);
        if (Key>=0) {
          DC.Data._Playlists.ItemHasChanged(clone, this);
        } else if (DC.Data.IsTransaction) {
          DC.Data.AddTransaction(new TransactionItem(2, TransactionActivityEnum.Update, Key, this, oldItem: clone));
        }
        HasChanged?.Invoke(clone, this);
      }
    }
    partial void onUpdating(string name, ref bool isCancelled);
    partial void onUpdated(Playlist old);


    /// <summary>
    /// Updates this Playlist with values from CSV file
    /// </summary>
    internal static void Update(Playlist playlist, CsvReader csvReader){
      DC.Data._PlaylistsByNameLower.Remove(playlist.NameLower);
      playlist.Name = csvReader.ReadString();
      playlist.NameLower = playlist.Name.ToLowerInvariant();
      DC.Data._PlaylistsByNameLower.Add(playlist.NameLower, playlist);
      playlist.onCsvUpdate();
    }
    partial void onCsvUpdate();


    /// <summary>
    /// Add playlistTrack to PlaylistTracks.
    /// </summary>
    internal void AddToPlaylistTracks(PlaylistTrack playlistTrack) {
#if DEBUG
      if (playlistTrack==PlaylistTrack.NoPlaylistTrack) throw new Exception();
      if ((playlistTrack.Key>=0)&&(Key<0)) throw new Exception();
      if (playlistTracks.Contains(playlistTrack)) throw new Exception();
#endif
      playlistTracks.Add(playlistTrack);
      onAddedToPlaylistTracks(playlistTrack);
    }
    partial void onAddedToPlaylistTracks(PlaylistTrack playlistTrack);


    /// <summary>
    /// Removes playlistTrack from Playlist.
    /// </summary>
    internal void RemoveFromPlaylistTracks(PlaylistTrack playlistTrack) {
#if DEBUG
      if (!playlistTracks.Remove(playlistTrack)) throw new Exception();
#else
        playlistTracks.Remove(playlistTrack);
#endif
      onRemovedFromPlaylistTracks(playlistTrack);
    }
    partial void onRemovedFromPlaylistTracks(PlaylistTrack playlistTrack);


    /// <summary>
    /// Removes Playlist from DC.Data.Playlists.
    /// </summary>
    public void Release() {
      if (Key<0) {
        throw new Exception($"Playlist.Release(): Playlist '{this}' is not stored in DC.Data, key is {Key}.");
      }
      onReleasing();
      foreach (var playlistTrack in PlaylistTracks) {
        if (playlistTrack?.Key>=0) {
          throw new Exception($"Cannot release Playlist '{this}' " + Environment.NewLine + 
            $"because '{playlistTrack}' in Playlist.PlaylistTracks is still stored.");
        }
      }
      DC.Data._PlaylistsByNameLower.Remove(NameLower);
      DC.Data._Playlists.Remove(Key);
      onReleased();
    }
    partial void onReleasing();
    partial void onReleased();


    /// <summary>
    /// Undoes the new() statement as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemNew(IStorageItem item) {
      var playlist = (Playlist) item;
      playlist.onRollbackItemNew();
    }
    partial void onRollbackItemNew();


    /// <summary>
    /// Releases Playlist from DC.Data.Playlists as part of a transaction rollback of Store().
    /// </summary>
    internal static void RollbackItemStore(IStorageItem item) {
      var playlist = (Playlist) item;
      DC.Data._PlaylistsByNameLower.Remove(playlist.NameLower);
      DC.Data._PlaylistsByNameLower.Remove(playlist.NameLower);
      playlist.onRollbackItemStored();
    }
    partial void onRollbackItemStored();


    /// <summary>
    /// Restores the Playlist item data as it was before the last update as part of a transaction rollback.
    /// </summary>
    internal static void RollbackItemUpdate(IStorageItem oldStorageItem, IStorageItem newStorageItem) {
      var oldItem = (Playlist) oldStorageItem;//an item clone with the values before item was updated
      var item = (Playlist) newStorageItem;//is the instance whose values should be restored

      // remove updated item from dictionaries
      DC.Data._PlaylistsByNameLower.Remove(item.NameLower);

      // updated item: restore old values
      item.Name = oldItem.Name;
      item.NameLower = item.Name.ToLowerInvariant();

      // add item with previous values to dictionaries
      DC.Data._PlaylistsByNameLower.Add(item.NameLower, item);
      item.onRollbackItemUpdated(oldItem);
    }
    partial void onRollbackItemUpdated(Playlist oldPlaylist);


    /// <summary>
    /// Adds Playlist to DC.Data.Playlists as part of a transaction rollback of Release().
    /// </summary>
    internal static void RollbackItemRelease(IStorageItem item) {
      var playlist = (Playlist) item;
      DC.Data._PlaylistsByNameLower.Add(playlist.NameLower, playlist);
      playlist.onRollbackItemRelease();
    }
    partial void onRollbackItemRelease();


    /// <summary>
    /// Returns property values for tracing. Parents are shown with their key instead their content.
    /// </summary>
    public string ToTraceString() {
      var returnString =
        $"{this.GetKeyOrHash()}|" +
        $" {Name}|" +
        $" {NameLower}";
      onToTraceString(ref returnString);
      return returnString;
    }
    partial void onToTraceString(ref string returnString);


    /// <summary>
    /// Returns property values
    /// </summary>
    public string ToShortString() {
      var returnString =
        $"{Key.ToKeyString()}," +
        $" {Name}," +
        $" {NameLower}";
      onToShortString(ref returnString);
      return returnString;
    }
    partial void onToShortString(ref string returnString);


    /// <summary>
    /// Returns all property names and values
    /// </summary>
    public override string ToString() {
      var returnString =
        $"Key: {Key.ToKeyString()}," +
        $" Name: {Name}," +
        $" NameLower: {NameLower}," +
        $" PlaylistTracks: {PlaylistTracks.Count}," +
        $" PlaylistTracksStored: {PlaylistTracks.CountStoredItems};";
      onToString(ref returnString);
      return returnString;
    }
    partial void onToString(ref string returnString);
    #endregion
  }
}
